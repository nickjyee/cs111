# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Nicholas Yee
Student ID: 803946252
Email: njyee@ucla.edu

# Partner 2 (if you're working in a team)
Name: Thomas Lutton
Student ID: 304180703
Email: tlutton@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

Run each task (i.e., download or upload) in a child process. Start all tasks 
before waiting for any of them to exit, so that the tasks run in parallel. 
Process uploads once all downloads are done.


# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

Setting a task's filename with strcpy will cause buffer overrun if the source 
string is longer than FILENAMESIZ bytes. We fixed this problem by setting the 
filename with strncpy to limit the amount of data copied to FILENAMESIZ bytes.

osp2p_snscanf(t->buf, t->tail, "GET %s OSP2P\n", t->filename)
^ This line of code in task_upload will overrun the t->filename buffer if 
the name specified in the GET remote procedure call is longer than 
FILENAMESIZ-1 bytes. To fix this, limit the number of bytes read from t->buf
to FILENAMESIZ-1 bytes + 11 remaining bytes in request = FILENAMESIZ+10 bytes.
If the requested filename is longer than this limit, the string read from
t->buf will not match the provided format and the process will exit with an
"odd request" error.

As an additional check that the filename buffer does not overflow because of
a long requested filename, after copying the name to t->filename set the last
byte of the t->filename buffer to a null byte. This will prevent bad memory
access  when referencing t->filename, but it will not fix data that was 
overwitten by the buffer overrun.


# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

Limit the amount of data that can be downloaded in one file to prevent 
peers from filling up our disk. The number of bytes downloaded is equal to 
t->head, so stop copying data from the task buffer to disk once t->head exceeds 
DOWNLOADLIMIT.

Do not serve requests for filenames that contain '/' to avoid serving files 
outside of the current directory or in one of the current directory's 
subdirectories.

There is also a problem when using the popular tracker. The popular tracker
contains many peers that are ready to serve the file. In fact, there are
so many peers that want to serve the file, that the messages that the
tracker sends back over flow the task buffer. A simple fix of this problem
is to increase TASKBUFSIZE beyond 4096 to a much larger number. We chose
16384 which is 4x larger than the original value. The actual bug itself 
occurs within read_tracker_response. This function trusts the tracker
to terminate its write before the buffer fills, but this obviously not the
case. A better solution is to not allow the tracker to overwrite the buffer.
The code could throw an error, or it could just cut off the task.  


# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

DOWNLOADER ATTACKS:

Our peer seeks out new peers to attack.

The skeleton code is susceptible to buffer overflow if a peer requests a file
with a name that is longer than FILENAMESIZ-1 (see EXERCISE 2A above). Our peer
sends a WANT request and receives a list of peers with that file. The normal
process is to connect to that peer and send a GET request that specifies the
filename. In evil mode, our peer sends a GET request with a filename that is
LONGNAMESIZ bytes long, where LONGNAMESIZ > FILENAMESIZ-1. The serving peer
copies the name into its filename buffer, thereby overflowing the buffer. The
attack has two effects. First, data located right next to the filename buffer
will be overwritten. Second, any references to the filename buffer will access
memory past the end of the buffer, since the string is not null-terminated.

After requesting a file long enough to overflow the serving peer's buffer, our
peer continues to attack. By default, a peer responds to a connection from
another peer by reading the request, getting the requested filename, opening
the requested file, and then uploading the file's data. If the request is not
formatted properly or the peer does not have the requested file, the peer's
code exits. Our peer attacks by spamming properly-formatted requests to peers
that have the requested file. If the peer uploads files in parallel, it will
open a new file descriptor for each request...

UPLOADER ATTACKS:

Our peer attacks peers that request a file from us.


# Extra credit problems
#Extra credit problem: File Integrity

In order to verify the file integrity of download images, we implemented
MD5 checksums. Since clients must tell the server the MD5 checksums of
their files, we can get the checksum of that file as it is presented
to the tracker and then compare that with the checksum that we actually
downloaded. If the checksums do not match, then we were served a tampered
file. First we check and save the checksum of the file that we are 
attempting to download (within start_download). In order to do this, we "poked
around" within the tracker using Telnet and found how to access the checksum
that the tracker stores for each file. Then, once the download is
complete, we compare the checksum of the file that we actually downloaded
with the checksum that we saved before the download (within task_download).
In order to obtain this second checksum, we need to compute it using the
md5 functions that are provided in md5.h. 

# Add any other information you'd like us to know below this line.
